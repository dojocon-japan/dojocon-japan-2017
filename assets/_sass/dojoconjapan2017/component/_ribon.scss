@mixin ribon($color, $height, $z-index: false) {
	background-color: $color;
	height: $height;
	position: relative;
	text-align: center;
	@if $z-index {
		z-index: $z-index;
	}

	&::after {
		@include position(absolute, 0 auto auto 100%);
		border-color: $color transparent $color $color;
		border-style: solid;
		border-width: ($height / 2) ($height / 2.8) ($height / 2) 0;
		display: block;
		content: "";
		height: 0;
		width: 0;
	}
}

@mixin ribon-bordered($args) {
	position: relative;

	$defaults: (
		color: transparent,
		height: 10px,
		width: 10px,
		border-color: transparent,
		border-width: 1px,
		direction: right,
	);

	$config: map-merge($defaults, $args);

	$color: map-get($config, color);
	$height: map-get($config, height);
	$width: map-get($config, width);
	$border-color: map-get($config, border-color);
	$border-width: map-get($config, border-width);
	$direction: map-get($config, direction);
	$opposition: left;

	@if $direction == left {
		$opposition: right;
	}

	&::before{
		@include position(absolute, auto);
		#{$opposition}: - $border-width;
		top: - $border-width;
		border: (($height + $border-width * 2) / 2) solid $border-color;
		border-#{$direction}-color: transparent;
		border-#{$direction}-width: (($height + $border-width * 2) / 2.8);
		border-#{$opposition}-width: ($width - ($height / 2.8) + $border-width * 2) + 1px;
		content: "";
		display: block;
		height: 0;
		margin: auto;
		width: 0;
		z-index: -1;
	}

	&::after {
		@include position(absolute, 0);
		border: ($height / 2) solid $color;
		border-#{$direction}-color: transparent;
		border-#{$direction}-width: ($height / 2.8);
		border-#{$opposition}-width: $width - ($height / 2.8);
		content: "";
		display: block;
		height: 0;
		margin: auto;
		width: 0;
		z-index: -1;
	}
}
